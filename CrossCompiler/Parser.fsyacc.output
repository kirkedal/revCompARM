Output file describing compiled parser placed in Parser.fs and Parser.fsi
------------------------
states = 
state 0:
  items:
    _startprog ->  . prog

  actions:
    action 'EOF' (noprec):   reduce defs --> 
    action 'LOCAL' (noprec):   reduce defs --> 
    action 'DELOCAL' (noprec):   reduce defs --> 
    action 'PROC' (noprec):   shift 21
    action 'MAIN' (noprec):   reduce defs --> 
    action 'CALL' (noprec):   reduce defs --> 
    action 'UNCALL' (noprec):   reduce defs --> 
    action 'FROM' (noprec):   reduce defs --> 
    action 'LOOP' (noprec):   reduce defs --> 
    action 'UNTIL' (noprec):   reduce defs --> 
    action 'DO' (noprec):   reduce defs --> 
    action 'IF' (noprec):   reduce defs --> 
    action 'THEN' (noprec):   reduce defs --> 
    action 'ELSE' (noprec):   reduce defs --> 
    action 'FI' (noprec):   reduce defs --> 
    action 'LPAR' (noprec):   reduce defs --> 
    action 'RPAR' (noprec):   reduce defs --> 
    action 'LBRACKET' (noprec):   reduce defs --> 
    action 'RBRACKET' (noprec):   reduce defs --> 
    action 'COMMA' (noprec):   reduce defs --> 
    action 'OR' (noprec):   reduce defs --> 
    action 'AND' (noprec):   reduce defs --> 
    action 'PLUS' (noprec):   reduce defs --> 
    action 'MINUS' (noprec):   reduce defs --> 
    action 'TIMES' (noprec):   reduce defs --> 
    action 'DIVIDE' (noprec):   reduce defs --> 
    action 'MOD' (noprec):   reduce defs --> 
    action 'LESS' (noprec):   reduce defs --> 
    action 'GREATER' (noprec):   reduce defs --> 
    action 'EQUAL' (noprec):   reduce defs --> 
    action 'NOT' (noprec):   reduce defs --> 
    action 'LEQ' (noprec):   reduce defs --> 
    action 'GEQ' (noprec):   reduce defs --> 
    action 'NOTEQ' (noprec):   reduce defs --> 
    action 'PLUSEQUAL' (noprec):   reduce defs --> 
    action 'MINUSEQUAL' (noprec):   reduce defs --> 
    action 'POWEREQUAL' (noprec):   reduce defs --> 
    action 'SWITCH' (noprec):   reduce defs --> 
    action 'TYPEINT' (noprec):   reduce defs --> 
    action 'INT' (noprec):   reduce defs --> 
    action 'ID' (noprec):   reduce defs --> 
    action 'error' (noprec):   reduce defs --> 
    action '#' (noprec):   reduce defs --> 
    action '$$' (noprec):   reduce defs --> 

  immediate action: <none>
 gotos:
    goto prog: 1
    goto def: 27
    goto defs: 14

state 1:
  items:
    _startprog -> prog . 

  actions:
    action 'EOF' (noprec):   accept
    action 'LOCAL' (noprec):   accept
    action 'DELOCAL' (noprec):   accept
    action 'PROC' (noprec):   accept
    action 'MAIN' (noprec):   accept
    action 'CALL' (noprec):   accept
    action 'UNCALL' (noprec):   accept
    action 'FROM' (noprec):   accept
    action 'LOOP' (noprec):   accept
    action 'UNTIL' (noprec):   accept
    action 'DO' (noprec):   accept
    action 'IF' (noprec):   accept
    action 'THEN' (noprec):   accept
    action 'ELSE' (noprec):   accept
    action 'FI' (noprec):   accept
    action 'LPAR' (noprec):   accept
    action 'RPAR' (noprec):   accept
    action 'LBRACKET' (noprec):   accept
    action 'RBRACKET' (noprec):   accept
    action 'COMMA' (noprec):   accept
    action 'OR' (noprec):   accept
    action 'AND' (noprec):   accept
    action 'PLUS' (noprec):   accept
    action 'MINUS' (noprec):   accept
    action 'TIMES' (noprec):   accept
    action 'DIVIDE' (noprec):   accept
    action 'MOD' (noprec):   accept
    action 'LESS' (noprec):   accept
    action 'GREATER' (noprec):   accept
    action 'EQUAL' (noprec):   accept
    action 'NOT' (noprec):   accept
    action 'LEQ' (noprec):   accept
    action 'GEQ' (noprec):   accept
    action 'NOTEQ' (noprec):   accept
    action 'PLUSEQUAL' (noprec):   accept
    action 'MINUSEQUAL' (noprec):   accept
    action 'POWEREQUAL' (noprec):   accept
    action 'SWITCH' (noprec):   accept
    action 'TYPEINT' (noprec):   accept
    action 'INT' (noprec):   accept
    action 'ID' (noprec):   accept
    action 'error' (noprec):   accept
    action '#' (noprec):   accept
    action '$$' (noprec):   accept

  immediate action:   accept
 gotos:

state 2:
  items:
    ids -> 'ID' . 'COMMA' ids
    ids -> 'ID' . 

  actions:
    action 'EOF' (noprec):   reduce ids --> 'ID'
    action 'LOCAL' (noprec):   reduce ids --> 'ID'
    action 'DELOCAL' (noprec):   reduce ids --> 'ID'
    action 'PROC' (noprec):   reduce ids --> 'ID'
    action 'MAIN' (noprec):   reduce ids --> 'ID'
    action 'CALL' (noprec):   reduce ids --> 'ID'
    action 'UNCALL' (noprec):   reduce ids --> 'ID'
    action 'FROM' (noprec):   reduce ids --> 'ID'
    action 'LOOP' (noprec):   reduce ids --> 'ID'
    action 'UNTIL' (noprec):   reduce ids --> 'ID'
    action 'DO' (noprec):   reduce ids --> 'ID'
    action 'IF' (noprec):   reduce ids --> 'ID'
    action 'THEN' (noprec):   reduce ids --> 'ID'
    action 'ELSE' (noprec):   reduce ids --> 'ID'
    action 'FI' (noprec):   reduce ids --> 'ID'
    action 'LPAR' (noprec):   reduce ids --> 'ID'
    action 'RPAR' (noprec):   reduce ids --> 'ID'
    action 'LBRACKET' (noprec):   reduce ids --> 'ID'
    action 'RBRACKET' (noprec):   reduce ids --> 'ID'
    action 'COMMA' (noprec):   shift 3
    action 'OR' (noprec):   reduce ids --> 'ID'
    action 'AND' (noprec):   reduce ids --> 'ID'
    action 'PLUS' (noprec):   reduce ids --> 'ID'
    action 'MINUS' (noprec):   reduce ids --> 'ID'
    action 'TIMES' (noprec):   reduce ids --> 'ID'
    action 'DIVIDE' (noprec):   reduce ids --> 'ID'
    action 'MOD' (noprec):   reduce ids --> 'ID'
    action 'LESS' (noprec):   reduce ids --> 'ID'
    action 'GREATER' (noprec):   reduce ids --> 'ID'
    action 'EQUAL' (noprec):   reduce ids --> 'ID'
    action 'NOT' (noprec):   reduce ids --> 'ID'
    action 'LEQ' (noprec):   reduce ids --> 'ID'
    action 'GEQ' (noprec):   reduce ids --> 'ID'
    action 'NOTEQ' (noprec):   reduce ids --> 'ID'
    action 'PLUSEQUAL' (noprec):   reduce ids --> 'ID'
    action 'MINUSEQUAL' (noprec):   reduce ids --> 'ID'
    action 'POWEREQUAL' (noprec):   reduce ids --> 'ID'
    action 'SWITCH' (noprec):   reduce ids --> 'ID'
    action 'TYPEINT' (noprec):   reduce ids --> 'ID'
    action 'INT' (noprec):   reduce ids --> 'ID'
    action 'ID' (noprec):   reduce ids --> 'ID'
    action 'error' (noprec):   reduce ids --> 'ID'
    action '#' (noprec):   reduce ids --> 'ID'
    action '$$' (noprec):   reduce ids --> 'ID'

  immediate action: <none>
 gotos:

state 3:
  items:
    ids -> 'ID' 'COMMA' . ids

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 2
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto ids: 4

state 4:
  items:
    ids -> 'ID' 'COMMA' ids . 

  actions:
    action 'EOF' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'LOCAL' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'DELOCAL' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'PROC' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'MAIN' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'CALL' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'UNCALL' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'FROM' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'LOOP' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'UNTIL' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'DO' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'IF' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'THEN' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'ELSE' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'FI' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'LPAR' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'RPAR' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'LBRACKET' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'RBRACKET' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'COMMA' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'OR' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'AND' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'PLUS' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'MINUS' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'TIMES' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'DIVIDE' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'MOD' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'LESS' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'GREATER' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'EQUAL' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'NOT' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'LEQ' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'GEQ' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'NOTEQ' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'PLUSEQUAL' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'MINUSEQUAL' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'POWEREQUAL' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'SWITCH' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'TYPEINT' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'INT' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'ID' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action 'error' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action '#' (noprec):   reduce ids --> 'ID' 'COMMA' ids
    action '$$' (noprec):   reduce ids --> 'ID' 'COMMA' ids

  immediate action:   reduce ids --> 'ID' 'COMMA' ids
 gotos:

state 5:
  items:
    opr -> 'PLUSEQUAL' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 6

state 6:
  items:
    opr -> 'PLUSEQUAL' exp . 
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'LOCAL' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'DELOCAL' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'PROC' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'MAIN' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'CALL' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'UNCALL' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'FROM' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'LOOP' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'UNTIL' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'DO' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'IF' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'THEN' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'ELSE' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'FI' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'LPAR' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'RPAR' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'LBRACKET' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'RBRACKET' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'COMMA' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'MINUSEQUAL' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'POWEREQUAL' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'SWITCH' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'TYPEINT' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'INT' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'ID' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action 'error' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action '#' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp
    action '$$' (explicit right 9994):   reduce opr --> 'PLUSEQUAL' exp

  immediate action: <none>
 gotos:

state 7:
  items:
    opr -> 'MINUSEQUAL' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 8

state 8:
  items:
    opr -> 'MINUSEQUAL' exp . 
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'LOCAL' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'DELOCAL' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'PROC' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'MAIN' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'CALL' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'UNCALL' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'FROM' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'LOOP' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'UNTIL' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'DO' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'IF' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'THEN' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'ELSE' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'FI' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'LPAR' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'RPAR' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'LBRACKET' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'RBRACKET' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'COMMA' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'MINUSEQUAL' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'POWEREQUAL' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'SWITCH' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'TYPEINT' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'INT' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'ID' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action 'error' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action '#' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp
    action '$$' (explicit right 9994):   reduce opr --> 'MINUSEQUAL' exp

  immediate action: <none>
 gotos:

state 9:
  items:
    opr -> 'POWEREQUAL' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 10

state 10:
  items:
    opr -> 'POWEREQUAL' exp . 
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'LOCAL' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'DELOCAL' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'PROC' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'MAIN' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'CALL' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'UNCALL' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'FROM' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'LOOP' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'UNTIL' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'DO' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'IF' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'THEN' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'ELSE' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'FI' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'LPAR' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'RPAR' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'LBRACKET' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'RBRACKET' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'COMMA' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'MINUSEQUAL' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'POWEREQUAL' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'SWITCH' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'TYPEINT' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'INT' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'ID' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action 'error' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action '#' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp
    action '$$' (explicit right 9994):   reduce opr --> 'POWEREQUAL' exp

  immediate action: <none>
 gotos:

state 11:
  items:
    opr -> 'SWITCH' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 12

state 12:
  items:
    opr -> 'SWITCH' exp . 
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (noprec):   reduce opr --> 'SWITCH' exp
    action 'LOCAL' (noprec):   reduce opr --> 'SWITCH' exp
    action 'DELOCAL' (noprec):   reduce opr --> 'SWITCH' exp
    action 'PROC' (noprec):   reduce opr --> 'SWITCH' exp
    action 'MAIN' (noprec):   reduce opr --> 'SWITCH' exp
    action 'CALL' (noprec):   reduce opr --> 'SWITCH' exp
    action 'UNCALL' (noprec):   reduce opr --> 'SWITCH' exp
    action 'FROM' (noprec):   reduce opr --> 'SWITCH' exp
    action 'LOOP' (noprec):   reduce opr --> 'SWITCH' exp
    action 'UNTIL' (noprec):   reduce opr --> 'SWITCH' exp
    action 'DO' (noprec):   reduce opr --> 'SWITCH' exp
    action 'IF' (noprec):   reduce opr --> 'SWITCH' exp
    action 'THEN' (noprec):   reduce opr --> 'SWITCH' exp
    action 'ELSE' (noprec):   reduce opr --> 'SWITCH' exp
    action 'FI' (noprec):   reduce opr --> 'SWITCH' exp
    action 'LPAR' (noprec):   reduce opr --> 'SWITCH' exp
    action 'RPAR' (noprec):   reduce opr --> 'SWITCH' exp
    action 'LBRACKET' (noprec):   reduce opr --> 'SWITCH' exp
    action 'RBRACKET' (noprec):   reduce opr --> 'SWITCH' exp
    action 'COMMA' (noprec):   reduce opr --> 'SWITCH' exp
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (noprec):   reduce opr --> 'SWITCH' exp
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (noprec):   reduce opr --> 'SWITCH' exp
    action 'MINUSEQUAL' (noprec):   reduce opr --> 'SWITCH' exp
    action 'POWEREQUAL' (noprec):   reduce opr --> 'SWITCH' exp
    action 'SWITCH' (noprec):   reduce opr --> 'SWITCH' exp
    action 'TYPEINT' (noprec):   reduce opr --> 'SWITCH' exp
    action 'INT' (noprec):   reduce opr --> 'SWITCH' exp
    action 'ID' (noprec):   reduce opr --> 'SWITCH' exp
    action 'error' (noprec):   reduce opr --> 'SWITCH' exp
    action '#' (noprec):   reduce opr --> 'SWITCH' exp
    action '$$' (noprec):   reduce opr --> 'SWITCH' exp

  immediate action: <none>
 gotos:

state 13:
  items:
    type -> 'TYPEINT' . 

  actions:
    action 'EOF' (noprec):   reduce type --> 'TYPEINT'
    action 'LOCAL' (noprec):   reduce type --> 'TYPEINT'
    action 'DELOCAL' (noprec):   reduce type --> 'TYPEINT'
    action 'PROC' (noprec):   reduce type --> 'TYPEINT'
    action 'MAIN' (noprec):   reduce type --> 'TYPEINT'
    action 'CALL' (noprec):   reduce type --> 'TYPEINT'
    action 'UNCALL' (noprec):   reduce type --> 'TYPEINT'
    action 'FROM' (noprec):   reduce type --> 'TYPEINT'
    action 'LOOP' (noprec):   reduce type --> 'TYPEINT'
    action 'UNTIL' (noprec):   reduce type --> 'TYPEINT'
    action 'DO' (noprec):   reduce type --> 'TYPEINT'
    action 'IF' (noprec):   reduce type --> 'TYPEINT'
    action 'THEN' (noprec):   reduce type --> 'TYPEINT'
    action 'ELSE' (noprec):   reduce type --> 'TYPEINT'
    action 'FI' (noprec):   reduce type --> 'TYPEINT'
    action 'LPAR' (noprec):   reduce type --> 'TYPEINT'
    action 'RPAR' (noprec):   reduce type --> 'TYPEINT'
    action 'LBRACKET' (noprec):   reduce type --> 'TYPEINT'
    action 'RBRACKET' (noprec):   reduce type --> 'TYPEINT'
    action 'COMMA' (noprec):   reduce type --> 'TYPEINT'
    action 'OR' (noprec):   reduce type --> 'TYPEINT'
    action 'AND' (noprec):   reduce type --> 'TYPEINT'
    action 'PLUS' (noprec):   reduce type --> 'TYPEINT'
    action 'MINUS' (noprec):   reduce type --> 'TYPEINT'
    action 'TIMES' (noprec):   reduce type --> 'TYPEINT'
    action 'DIVIDE' (noprec):   reduce type --> 'TYPEINT'
    action 'MOD' (noprec):   reduce type --> 'TYPEINT'
    action 'LESS' (noprec):   reduce type --> 'TYPEINT'
    action 'GREATER' (noprec):   reduce type --> 'TYPEINT'
    action 'EQUAL' (noprec):   reduce type --> 'TYPEINT'
    action 'NOT' (noprec):   reduce type --> 'TYPEINT'
    action 'LEQ' (noprec):   reduce type --> 'TYPEINT'
    action 'GEQ' (noprec):   reduce type --> 'TYPEINT'
    action 'NOTEQ' (noprec):   reduce type --> 'TYPEINT'
    action 'PLUSEQUAL' (noprec):   reduce type --> 'TYPEINT'
    action 'MINUSEQUAL' (noprec):   reduce type --> 'TYPEINT'
    action 'POWEREQUAL' (noprec):   reduce type --> 'TYPEINT'
    action 'SWITCH' (noprec):   reduce type --> 'TYPEINT'
    action 'TYPEINT' (noprec):   reduce type --> 'TYPEINT'
    action 'INT' (noprec):   reduce type --> 'TYPEINT'
    action 'ID' (noprec):   reduce type --> 'TYPEINT'
    action 'error' (noprec):   reduce type --> 'TYPEINT'
    action '#' (noprec):   reduce type --> 'TYPEINT'
    action '$$' (noprec):   reduce type --> 'TYPEINT'

  immediate action:   reduce type --> 'TYPEINT'
 gotos:

state 14:
  items:
    prog -> defs . defmain defs 'EOF'

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   shift 18
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto defmain: 15

state 15:
  items:
    prog -> defs defmain . defs 'EOF'

  actions:
    action 'EOF' (noprec):   reduce defs --> 
    action 'LOCAL' (noprec):   reduce defs --> 
    action 'DELOCAL' (noprec):   reduce defs --> 
    action 'PROC' (noprec):   shift 21
    action 'MAIN' (noprec):   reduce defs --> 
    action 'CALL' (noprec):   reduce defs --> 
    action 'UNCALL' (noprec):   reduce defs --> 
    action 'FROM' (noprec):   reduce defs --> 
    action 'LOOP' (noprec):   reduce defs --> 
    action 'UNTIL' (noprec):   reduce defs --> 
    action 'DO' (noprec):   reduce defs --> 
    action 'IF' (noprec):   reduce defs --> 
    action 'THEN' (noprec):   reduce defs --> 
    action 'ELSE' (noprec):   reduce defs --> 
    action 'FI' (noprec):   reduce defs --> 
    action 'LPAR' (noprec):   reduce defs --> 
    action 'RPAR' (noprec):   reduce defs --> 
    action 'LBRACKET' (noprec):   reduce defs --> 
    action 'RBRACKET' (noprec):   reduce defs --> 
    action 'COMMA' (noprec):   reduce defs --> 
    action 'OR' (noprec):   reduce defs --> 
    action 'AND' (noprec):   reduce defs --> 
    action 'PLUS' (noprec):   reduce defs --> 
    action 'MINUS' (noprec):   reduce defs --> 
    action 'TIMES' (noprec):   reduce defs --> 
    action 'DIVIDE' (noprec):   reduce defs --> 
    action 'MOD' (noprec):   reduce defs --> 
    action 'LESS' (noprec):   reduce defs --> 
    action 'GREATER' (noprec):   reduce defs --> 
    action 'EQUAL' (noprec):   reduce defs --> 
    action 'NOT' (noprec):   reduce defs --> 
    action 'LEQ' (noprec):   reduce defs --> 
    action 'GEQ' (noprec):   reduce defs --> 
    action 'NOTEQ' (noprec):   reduce defs --> 
    action 'PLUSEQUAL' (noprec):   reduce defs --> 
    action 'MINUSEQUAL' (noprec):   reduce defs --> 
    action 'POWEREQUAL' (noprec):   reduce defs --> 
    action 'SWITCH' (noprec):   reduce defs --> 
    action 'TYPEINT' (noprec):   reduce defs --> 
    action 'INT' (noprec):   reduce defs --> 
    action 'ID' (noprec):   reduce defs --> 
    action 'error' (noprec):   reduce defs --> 
    action '#' (noprec):   reduce defs --> 
    action '$$' (noprec):   reduce defs --> 

  immediate action: <none>
 gotos:
    goto def: 27
    goto defs: 16

state 16:
  items:
    prog -> defs defmain defs . 'EOF'

  actions:
    action 'EOF' (noprec):   shift 17
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 17:
  items:
    prog -> defs defmain defs 'EOF' . 

  actions:
    action 'EOF' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'LOCAL' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'DELOCAL' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'PROC' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'MAIN' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'CALL' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'UNCALL' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'FROM' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'LOOP' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'UNTIL' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'DO' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'IF' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'THEN' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'ELSE' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'FI' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'LPAR' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'RPAR' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'LBRACKET' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'RBRACKET' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'COMMA' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'OR' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'AND' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'PLUS' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'MINUS' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'TIMES' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'DIVIDE' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'MOD' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'LESS' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'GREATER' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'EQUAL' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'NOT' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'LEQ' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'GEQ' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'NOTEQ' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'PLUSEQUAL' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'MINUSEQUAL' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'POWEREQUAL' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'SWITCH' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'TYPEINT' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'INT' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'ID' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action 'error' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action '#' (noprec):   reduce prog --> defs defmain defs 'EOF'
    action '$$' (noprec):   reduce prog --> defs defmain defs 'EOF'

  immediate action:   reduce prog --> defs defmain defs 'EOF'
 gotos:

state 18:
  items:
    defmain -> 'MAIN' . defvars stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   shift 13
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto type: 29
    goto defvar: 35
    goto defvars: 19

state 19:
  items:
    defmain -> 'MAIN' defvars . stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 20
    goto exp: 71

state 20:
  items:
    defmain -> 'MAIN' defvars stmt . 
    stmt -> stmt . stmt

  actions:
    action 'EOF' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'PROC' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'MAIN' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'UNTIL' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'DO' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'ELSE' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'FI' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'LBRACKET' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'RBRACKET' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'COMMA' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'OR' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'AND' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'PLUS' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'MINUS' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'TIMES' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'DIVIDE' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'MOD' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'LESS' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'GREATER' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'EQUAL' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'GEQ' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'NOTEQ' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'PLUSEQUAL' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'MINUSEQUAL' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'POWEREQUAL' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'SWITCH' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'TYPEINT' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action '#' (noprec):   reduce defmain --> 'MAIN' defvars stmt
    action '$$' (noprec):   reduce defmain --> 'MAIN' defvars stmt

  immediate action: <none>
 gotos:
    goto stmt: 82
    goto exp: 71

state 21:
  items:
    def -> 'PROC' . 'ID' 'LPAR' defvars 'RPAR' stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 22
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 22:
  items:
    def -> 'PROC' 'ID' . 'LPAR' defvars 'RPAR' stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 23
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 23:
  items:
    def -> 'PROC' 'ID' 'LPAR' . defvars 'RPAR' stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   shift 13
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto type: 29
    goto defvar: 35
    goto defvars: 24

state 24:
  items:
    def -> 'PROC' 'ID' 'LPAR' defvars . 'RPAR' stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   shift 25
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 25:
  items:
    def -> 'PROC' 'ID' 'LPAR' defvars 'RPAR' . stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 26
    goto exp: 71

state 26:
  items:
    def -> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt . 
    stmt -> stmt . stmt

  actions:
    action 'EOF' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'PROC' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'MAIN' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'UNTIL' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'DO' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'ELSE' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'FI' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'LBRACKET' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'RBRACKET' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'COMMA' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'OR' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'AND' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'PLUS' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'MINUS' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'TIMES' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'DIVIDE' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'MOD' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'LESS' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'GREATER' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'EQUAL' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'GEQ' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'NOTEQ' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'PLUSEQUAL' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'MINUSEQUAL' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'POWEREQUAL' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'SWITCH' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'TYPEINT' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action '#' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt
    action '$$' (noprec):   reduce def --> 'PROC' 'ID' 'LPAR' defvars 'RPAR' stmt

  immediate action: <none>
 gotos:
    goto stmt: 82
    goto exp: 71

state 27:
  items:
    defs -> def . defs
    defs -> def . 

  actions:
    action 'EOF' (noprec):   reduce defs --> def
    action 'LOCAL' (noprec):   reduce defs --> def
    action 'DELOCAL' (noprec):   reduce defs --> def
    action 'PROC' (noprec):   shift 21
    action 'MAIN' (noprec):   reduce defs --> def
    action 'CALL' (noprec):   reduce defs --> def
    action 'UNCALL' (noprec):   reduce defs --> def
    action 'FROM' (noprec):   reduce defs --> def
    action 'LOOP' (noprec):   reduce defs --> def
    action 'UNTIL' (noprec):   reduce defs --> def
    action 'DO' (noprec):   reduce defs --> def
    action 'IF' (noprec):   reduce defs --> def
    action 'THEN' (noprec):   reduce defs --> def
    action 'ELSE' (noprec):   reduce defs --> def
    action 'FI' (noprec):   reduce defs --> def
    action 'LPAR' (noprec):   reduce defs --> def
    action 'RPAR' (noprec):   reduce defs --> def
    action 'LBRACKET' (noprec):   reduce defs --> def
    action 'RBRACKET' (noprec):   reduce defs --> def
    action 'COMMA' (noprec):   reduce defs --> def
    action 'OR' (noprec):   reduce defs --> def
    action 'AND' (noprec):   reduce defs --> def
    action 'PLUS' (noprec):   reduce defs --> def
    action 'MINUS' (noprec):   reduce defs --> def
    action 'TIMES' (noprec):   reduce defs --> def
    action 'DIVIDE' (noprec):   reduce defs --> def
    action 'MOD' (noprec):   reduce defs --> def
    action 'LESS' (noprec):   reduce defs --> def
    action 'GREATER' (noprec):   reduce defs --> def
    action 'EQUAL' (noprec):   reduce defs --> def
    action 'NOT' (noprec):   reduce defs --> def
    action 'LEQ' (noprec):   reduce defs --> def
    action 'GEQ' (noprec):   reduce defs --> def
    action 'NOTEQ' (noprec):   reduce defs --> def
    action 'PLUSEQUAL' (noprec):   reduce defs --> def
    action 'MINUSEQUAL' (noprec):   reduce defs --> def
    action 'POWEREQUAL' (noprec):   reduce defs --> def
    action 'SWITCH' (noprec):   reduce defs --> def
    action 'TYPEINT' (noprec):   reduce defs --> def
    action 'INT' (noprec):   reduce defs --> def
    action 'ID' (noprec):   reduce defs --> def
    action 'error' (noprec):   reduce defs --> def
    action '#' (noprec):   reduce defs --> def
    action '$$' (noprec):   reduce defs --> def

  immediate action: <none>
 gotos:
    goto def: 27
    goto defs: 28

state 28:
  items:
    defs -> def defs . 

  actions:
    action 'EOF' (noprec):   reduce defs --> def defs
    action 'LOCAL' (noprec):   reduce defs --> def defs
    action 'DELOCAL' (noprec):   reduce defs --> def defs
    action 'PROC' (noprec):   reduce defs --> def defs
    action 'MAIN' (noprec):   reduce defs --> def defs
    action 'CALL' (noprec):   reduce defs --> def defs
    action 'UNCALL' (noprec):   reduce defs --> def defs
    action 'FROM' (noprec):   reduce defs --> def defs
    action 'LOOP' (noprec):   reduce defs --> def defs
    action 'UNTIL' (noprec):   reduce defs --> def defs
    action 'DO' (noprec):   reduce defs --> def defs
    action 'IF' (noprec):   reduce defs --> def defs
    action 'THEN' (noprec):   reduce defs --> def defs
    action 'ELSE' (noprec):   reduce defs --> def defs
    action 'FI' (noprec):   reduce defs --> def defs
    action 'LPAR' (noprec):   reduce defs --> def defs
    action 'RPAR' (noprec):   reduce defs --> def defs
    action 'LBRACKET' (noprec):   reduce defs --> def defs
    action 'RBRACKET' (noprec):   reduce defs --> def defs
    action 'COMMA' (noprec):   reduce defs --> def defs
    action 'OR' (noprec):   reduce defs --> def defs
    action 'AND' (noprec):   reduce defs --> def defs
    action 'PLUS' (noprec):   reduce defs --> def defs
    action 'MINUS' (noprec):   reduce defs --> def defs
    action 'TIMES' (noprec):   reduce defs --> def defs
    action 'DIVIDE' (noprec):   reduce defs --> def defs
    action 'MOD' (noprec):   reduce defs --> def defs
    action 'LESS' (noprec):   reduce defs --> def defs
    action 'GREATER' (noprec):   reduce defs --> def defs
    action 'EQUAL' (noprec):   reduce defs --> def defs
    action 'NOT' (noprec):   reduce defs --> def defs
    action 'LEQ' (noprec):   reduce defs --> def defs
    action 'GEQ' (noprec):   reduce defs --> def defs
    action 'NOTEQ' (noprec):   reduce defs --> def defs
    action 'PLUSEQUAL' (noprec):   reduce defs --> def defs
    action 'MINUSEQUAL' (noprec):   reduce defs --> def defs
    action 'POWEREQUAL' (noprec):   reduce defs --> def defs
    action 'SWITCH' (noprec):   reduce defs --> def defs
    action 'TYPEINT' (noprec):   reduce defs --> def defs
    action 'INT' (noprec):   reduce defs --> def defs
    action 'ID' (noprec):   reduce defs --> def defs
    action 'error' (noprec):   reduce defs --> def defs
    action '#' (noprec):   reduce defs --> def defs
    action '$$' (noprec):   reduce defs --> def defs

  immediate action:   reduce defs --> def defs
 gotos:

state 29:
  items:
    defvar -> type . 'ID'
    defvar -> type . 'ID' 'LBRACKET' exp 'RBRACKET'
    defvar -> type . 'ID' 'LBRACKET' 'RBRACKET'

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 30
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 30:
  items:
    defvar -> type 'ID' . 
    defvar -> type 'ID' . 'LBRACKET' exp 'RBRACKET'
    defvar -> type 'ID' . 'LBRACKET' 'RBRACKET'

  actions:
    action 'EOF' (noprec):   reduce defvar --> type 'ID'
    action 'LOCAL' (noprec):   reduce defvar --> type 'ID'
    action 'DELOCAL' (noprec):   reduce defvar --> type 'ID'
    action 'PROC' (noprec):   reduce defvar --> type 'ID'
    action 'MAIN' (noprec):   reduce defvar --> type 'ID'
    action 'CALL' (noprec):   reduce defvar --> type 'ID'
    action 'UNCALL' (noprec):   reduce defvar --> type 'ID'
    action 'FROM' (noprec):   reduce defvar --> type 'ID'
    action 'LOOP' (noprec):   reduce defvar --> type 'ID'
    action 'UNTIL' (noprec):   reduce defvar --> type 'ID'
    action 'DO' (noprec):   reduce defvar --> type 'ID'
    action 'IF' (noprec):   reduce defvar --> type 'ID'
    action 'THEN' (noprec):   reduce defvar --> type 'ID'
    action 'ELSE' (noprec):   reduce defvar --> type 'ID'
    action 'FI' (noprec):   reduce defvar --> type 'ID'
    action 'LPAR' (noprec):   reduce defvar --> type 'ID'
    action 'RPAR' (noprec):   reduce defvar --> type 'ID'
    action 'LBRACKET' (noprec):   shift 31
    action 'RBRACKET' (noprec):   reduce defvar --> type 'ID'
    action 'COMMA' (noprec):   reduce defvar --> type 'ID'
    action 'OR' (noprec):   reduce defvar --> type 'ID'
    action 'AND' (noprec):   reduce defvar --> type 'ID'
    action 'PLUS' (noprec):   reduce defvar --> type 'ID'
    action 'MINUS' (noprec):   reduce defvar --> type 'ID'
    action 'TIMES' (noprec):   reduce defvar --> type 'ID'
    action 'DIVIDE' (noprec):   reduce defvar --> type 'ID'
    action 'MOD' (noprec):   reduce defvar --> type 'ID'
    action 'LESS' (noprec):   reduce defvar --> type 'ID'
    action 'GREATER' (noprec):   reduce defvar --> type 'ID'
    action 'EQUAL' (noprec):   reduce defvar --> type 'ID'
    action 'NOT' (noprec):   reduce defvar --> type 'ID'
    action 'LEQ' (noprec):   reduce defvar --> type 'ID'
    action 'GEQ' (noprec):   reduce defvar --> type 'ID'
    action 'NOTEQ' (noprec):   reduce defvar --> type 'ID'
    action 'PLUSEQUAL' (noprec):   reduce defvar --> type 'ID'
    action 'MINUSEQUAL' (noprec):   reduce defvar --> type 'ID'
    action 'POWEREQUAL' (noprec):   reduce defvar --> type 'ID'
    action 'SWITCH' (noprec):   reduce defvar --> type 'ID'
    action 'TYPEINT' (noprec):   reduce defvar --> type 'ID'
    action 'INT' (noprec):   reduce defvar --> type 'ID'
    action 'ID' (noprec):   reduce defvar --> type 'ID'
    action 'error' (noprec):   reduce defvar --> type 'ID'
    action '#' (noprec):   reduce defvar --> type 'ID'
    action '$$' (noprec):   reduce defvar --> type 'ID'

  immediate action: <none>
 gotos:

state 31:
  items:
    defvar -> type 'ID' 'LBRACKET' . exp 'RBRACKET'
    defvar -> type 'ID' 'LBRACKET' . 'RBRACKET'

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   shift 34
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 32

state 32:
  items:
    defvar -> type 'ID' 'LBRACKET' exp . 'RBRACKET'
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   shift 33
    action 'COMMA' (noprec):   error
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (noprec):   error
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 33:
  items:
    defvar -> type 'ID' 'LBRACKET' exp 'RBRACKET' . 

  actions:
    action 'EOF' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'LOCAL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'DELOCAL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'PROC' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'MAIN' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'CALL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'UNCALL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'FROM' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'LOOP' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'UNTIL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'DO' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'IF' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'THEN' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'ELSE' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'FI' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'LPAR' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'RPAR' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'LBRACKET' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'RBRACKET' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'COMMA' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'OR' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'AND' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'PLUS' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'MINUS' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'TIMES' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'DIVIDE' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'MOD' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'LESS' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'GREATER' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'EQUAL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'NOT' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'LEQ' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'GEQ' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'NOTEQ' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'PLUSEQUAL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'MINUSEQUAL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'POWEREQUAL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'SWITCH' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'TYPEINT' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'INT' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'ID' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'error' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action '#' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
    action '$$' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'

  immediate action:   reduce defvar --> type 'ID' 'LBRACKET' exp 'RBRACKET'
 gotos:

state 34:
  items:
    defvar -> type 'ID' 'LBRACKET' 'RBRACKET' . 

  actions:
    action 'EOF' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'LOCAL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'DELOCAL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'PROC' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'MAIN' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'CALL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'UNCALL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'FROM' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'LOOP' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'UNTIL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'DO' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'IF' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'THEN' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'ELSE' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'FI' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'LPAR' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'RPAR' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'LBRACKET' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'RBRACKET' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'COMMA' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'OR' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'AND' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'PLUS' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'MINUS' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'TIMES' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'DIVIDE' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'MOD' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'LESS' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'GREATER' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'EQUAL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'NOT' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'LEQ' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'GEQ' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'NOTEQ' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'PLUSEQUAL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'MINUSEQUAL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'POWEREQUAL' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'SWITCH' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'TYPEINT' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'INT' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'ID' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action 'error' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action '#' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
    action '$$' (noprec):   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'

  immediate action:   reduce defvar --> type 'ID' 'LBRACKET' 'RBRACKET'
 gotos:

state 35:
  items:
    defvars -> defvar . 'COMMA' defvars
    defvars -> defvar . defvars
    defvars -> defvar . 

  actions:
    action 'EOF' (noprec):   reduce defvars --> defvar
    action 'LOCAL' (noprec):   reduce defvars --> defvar
    action 'DELOCAL' (noprec):   reduce defvars --> defvar
    action 'PROC' (noprec):   reduce defvars --> defvar
    action 'MAIN' (noprec):   reduce defvars --> defvar
    action 'CALL' (noprec):   reduce defvars --> defvar
    action 'UNCALL' (noprec):   reduce defvars --> defvar
    action 'FROM' (noprec):   reduce defvars --> defvar
    action 'LOOP' (noprec):   reduce defvars --> defvar
    action 'UNTIL' (noprec):   reduce defvars --> defvar
    action 'DO' (noprec):   reduce defvars --> defvar
    action 'IF' (noprec):   reduce defvars --> defvar
    action 'THEN' (noprec):   reduce defvars --> defvar
    action 'ELSE' (noprec):   reduce defvars --> defvar
    action 'FI' (noprec):   reduce defvars --> defvar
    action 'LPAR' (noprec):   reduce defvars --> defvar
    action 'RPAR' (noprec):   reduce defvars --> defvar
    action 'LBRACKET' (noprec):   reduce defvars --> defvar
    action 'RBRACKET' (noprec):   reduce defvars --> defvar
    action 'COMMA' (noprec):   shift 36
    action 'OR' (noprec):   reduce defvars --> defvar
    action 'AND' (noprec):   reduce defvars --> defvar
    action 'PLUS' (noprec):   reduce defvars --> defvar
    action 'MINUS' (noprec):   reduce defvars --> defvar
    action 'TIMES' (noprec):   reduce defvars --> defvar
    action 'DIVIDE' (noprec):   reduce defvars --> defvar
    action 'MOD' (noprec):   reduce defvars --> defvar
    action 'LESS' (noprec):   reduce defvars --> defvar
    action 'GREATER' (noprec):   reduce defvars --> defvar
    action 'EQUAL' (noprec):   reduce defvars --> defvar
    action 'NOT' (noprec):   reduce defvars --> defvar
    action 'LEQ' (noprec):   reduce defvars --> defvar
    action 'GEQ' (noprec):   reduce defvars --> defvar
    action 'NOTEQ' (noprec):   reduce defvars --> defvar
    action 'PLUSEQUAL' (noprec):   reduce defvars --> defvar
    action 'MINUSEQUAL' (noprec):   reduce defvars --> defvar
    action 'POWEREQUAL' (noprec):   reduce defvars --> defvar
    action 'SWITCH' (noprec):   reduce defvars --> defvar
    action 'TYPEINT' (noprec):   shift 13
    action 'INT' (noprec):   reduce defvars --> defvar
    action 'ID' (noprec):   reduce defvars --> defvar
    action 'error' (noprec):   reduce defvars --> defvar
    action '#' (noprec):   reduce defvars --> defvar
    action '$$' (noprec):   reduce defvars --> defvar

  immediate action: <none>
 gotos:
    goto type: 29
    goto defvar: 35
    goto defvars: 38

state 36:
  items:
    defvars -> defvar 'COMMA' . defvars

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   shift 13
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto type: 29
    goto defvar: 35
    goto defvars: 37

state 37:
  items:
    defvars -> defvar 'COMMA' defvars . 

  actions:
    action 'EOF' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'LOCAL' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'DELOCAL' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'PROC' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'MAIN' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'CALL' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'UNCALL' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'FROM' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'LOOP' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'UNTIL' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'DO' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'IF' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'THEN' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'ELSE' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'FI' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'LPAR' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'RPAR' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'LBRACKET' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'RBRACKET' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'COMMA' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'OR' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'AND' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'PLUS' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'MINUS' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'TIMES' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'DIVIDE' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'MOD' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'LESS' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'GREATER' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'EQUAL' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'NOT' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'LEQ' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'GEQ' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'NOTEQ' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'PLUSEQUAL' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'MINUSEQUAL' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'POWEREQUAL' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'SWITCH' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'TYPEINT' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'INT' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'ID' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action 'error' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action '#' (noprec):   reduce defvars --> defvar 'COMMA' defvars
    action '$$' (noprec):   reduce defvars --> defvar 'COMMA' defvars

  immediate action:   reduce defvars --> defvar 'COMMA' defvars
 gotos:

state 38:
  items:
    defvars -> defvar defvars . 

  actions:
    action 'EOF' (noprec):   reduce defvars --> defvar defvars
    action 'LOCAL' (noprec):   reduce defvars --> defvar defvars
    action 'DELOCAL' (noprec):   reduce defvars --> defvar defvars
    action 'PROC' (noprec):   reduce defvars --> defvar defvars
    action 'MAIN' (noprec):   reduce defvars --> defvar defvars
    action 'CALL' (noprec):   reduce defvars --> defvar defvars
    action 'UNCALL' (noprec):   reduce defvars --> defvar defvars
    action 'FROM' (noprec):   reduce defvars --> defvar defvars
    action 'LOOP' (noprec):   reduce defvars --> defvar defvars
    action 'UNTIL' (noprec):   reduce defvars --> defvar defvars
    action 'DO' (noprec):   reduce defvars --> defvar defvars
    action 'IF' (noprec):   reduce defvars --> defvar defvars
    action 'THEN' (noprec):   reduce defvars --> defvar defvars
    action 'ELSE' (noprec):   reduce defvars --> defvar defvars
    action 'FI' (noprec):   reduce defvars --> defvar defvars
    action 'LPAR' (noprec):   reduce defvars --> defvar defvars
    action 'RPAR' (noprec):   reduce defvars --> defvar defvars
    action 'LBRACKET' (noprec):   reduce defvars --> defvar defvars
    action 'RBRACKET' (noprec):   reduce defvars --> defvar defvars
    action 'COMMA' (noprec):   reduce defvars --> defvar defvars
    action 'OR' (noprec):   reduce defvars --> defvar defvars
    action 'AND' (noprec):   reduce defvars --> defvar defvars
    action 'PLUS' (noprec):   reduce defvars --> defvar defvars
    action 'MINUS' (noprec):   reduce defvars --> defvar defvars
    action 'TIMES' (noprec):   reduce defvars --> defvar defvars
    action 'DIVIDE' (noprec):   reduce defvars --> defvar defvars
    action 'MOD' (noprec):   reduce defvars --> defvar defvars
    action 'LESS' (noprec):   reduce defvars --> defvar defvars
    action 'GREATER' (noprec):   reduce defvars --> defvar defvars
    action 'EQUAL' (noprec):   reduce defvars --> defvar defvars
    action 'NOT' (noprec):   reduce defvars --> defvar defvars
    action 'LEQ' (noprec):   reduce defvars --> defvar defvars
    action 'GEQ' (noprec):   reduce defvars --> defvar defvars
    action 'NOTEQ' (noprec):   reduce defvars --> defvar defvars
    action 'PLUSEQUAL' (noprec):   reduce defvars --> defvar defvars
    action 'MINUSEQUAL' (noprec):   reduce defvars --> defvar defvars
    action 'POWEREQUAL' (noprec):   reduce defvars --> defvar defvars
    action 'SWITCH' (noprec):   reduce defvars --> defvar defvars
    action 'TYPEINT' (noprec):   reduce defvars --> defvar defvars
    action 'INT' (noprec):   reduce defvars --> defvar defvars
    action 'ID' (noprec):   reduce defvars --> defvar defvars
    action 'error' (noprec):   reduce defvars --> defvar defvars
    action '#' (noprec):   reduce defvars --> defvar defvars
    action '$$' (noprec):   reduce defvars --> defvar defvars

  immediate action:   reduce defvars --> defvar defvars
 gotos:

state 39:
  items:
    proc -> 'ID' . 'LPAR' ids 'RPAR'

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 40
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 40:
  items:
    proc -> 'ID' 'LPAR' . ids 'RPAR'

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 2
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto ids: 41

state 41:
  items:
    proc -> 'ID' 'LPAR' ids . 'RPAR'

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   shift 42
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 42:
  items:
    proc -> 'ID' 'LPAR' ids 'RPAR' . 

  actions:
    action 'EOF' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'LOCAL' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'DELOCAL' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'PROC' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'MAIN' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'CALL' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'UNCALL' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'FROM' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'LOOP' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'UNTIL' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'DO' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'IF' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'THEN' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'ELSE' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'FI' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'LPAR' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'RPAR' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'LBRACKET' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'RBRACKET' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'COMMA' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'OR' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'AND' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'PLUS' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'MINUS' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'TIMES' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'DIVIDE' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'MOD' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'LESS' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'GREATER' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'EQUAL' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'NOT' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'LEQ' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'GEQ' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'NOTEQ' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'PLUSEQUAL' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'MINUSEQUAL' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'POWEREQUAL' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'SWITCH' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'TYPEINT' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'INT' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'ID' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action 'error' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action '#' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
    action '$$' (noprec):   reduce proc --> 'ID' 'LPAR' ids 'RPAR'

  immediate action:   reduce proc --> 'ID' 'LPAR' ids 'RPAR'
 gotos:

state 43:
  items:
    stmt -> 'CALL' . proc

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 39
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto proc: 44

state 44:
  items:
    stmt -> 'CALL' proc . 

  actions:
    action 'EOF' (noprec):   reduce stmt --> 'CALL' proc
    action 'LOCAL' (noprec):   reduce stmt --> 'CALL' proc
    action 'DELOCAL' (noprec):   reduce stmt --> 'CALL' proc
    action 'PROC' (noprec):   reduce stmt --> 'CALL' proc
    action 'MAIN' (noprec):   reduce stmt --> 'CALL' proc
    action 'CALL' (noprec):   reduce stmt --> 'CALL' proc
    action 'UNCALL' (noprec):   reduce stmt --> 'CALL' proc
    action 'FROM' (noprec):   reduce stmt --> 'CALL' proc
    action 'LOOP' (noprec):   reduce stmt --> 'CALL' proc
    action 'UNTIL' (noprec):   reduce stmt --> 'CALL' proc
    action 'DO' (noprec):   reduce stmt --> 'CALL' proc
    action 'IF' (noprec):   reduce stmt --> 'CALL' proc
    action 'THEN' (noprec):   reduce stmt --> 'CALL' proc
    action 'ELSE' (noprec):   reduce stmt --> 'CALL' proc
    action 'FI' (noprec):   reduce stmt --> 'CALL' proc
    action 'LPAR' (noprec):   reduce stmt --> 'CALL' proc
    action 'RPAR' (noprec):   reduce stmt --> 'CALL' proc
    action 'LBRACKET' (noprec):   reduce stmt --> 'CALL' proc
    action 'RBRACKET' (noprec):   reduce stmt --> 'CALL' proc
    action 'COMMA' (noprec):   reduce stmt --> 'CALL' proc
    action 'OR' (noprec):   reduce stmt --> 'CALL' proc
    action 'AND' (noprec):   reduce stmt --> 'CALL' proc
    action 'PLUS' (noprec):   reduce stmt --> 'CALL' proc
    action 'MINUS' (noprec):   reduce stmt --> 'CALL' proc
    action 'TIMES' (noprec):   reduce stmt --> 'CALL' proc
    action 'DIVIDE' (noprec):   reduce stmt --> 'CALL' proc
    action 'MOD' (noprec):   reduce stmt --> 'CALL' proc
    action 'LESS' (noprec):   reduce stmt --> 'CALL' proc
    action 'GREATER' (noprec):   reduce stmt --> 'CALL' proc
    action 'EQUAL' (noprec):   reduce stmt --> 'CALL' proc
    action 'NOT' (noprec):   reduce stmt --> 'CALL' proc
    action 'LEQ' (noprec):   reduce stmt --> 'CALL' proc
    action 'GEQ' (noprec):   reduce stmt --> 'CALL' proc
    action 'NOTEQ' (noprec):   reduce stmt --> 'CALL' proc
    action 'PLUSEQUAL' (noprec):   reduce stmt --> 'CALL' proc
    action 'MINUSEQUAL' (noprec):   reduce stmt --> 'CALL' proc
    action 'POWEREQUAL' (noprec):   reduce stmt --> 'CALL' proc
    action 'SWITCH' (noprec):   reduce stmt --> 'CALL' proc
    action 'TYPEINT' (noprec):   reduce stmt --> 'CALL' proc
    action 'INT' (noprec):   reduce stmt --> 'CALL' proc
    action 'ID' (noprec):   reduce stmt --> 'CALL' proc
    action 'error' (noprec):   reduce stmt --> 'CALL' proc
    action '#' (noprec):   reduce stmt --> 'CALL' proc
    action '$$' (noprec):   reduce stmt --> 'CALL' proc

  immediate action:   reduce stmt --> 'CALL' proc
 gotos:

state 45:
  items:
    stmt -> 'UNCALL' . proc

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 39
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto proc: 46

state 46:
  items:
    stmt -> 'UNCALL' proc . 

  actions:
    action 'EOF' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'LOCAL' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'DELOCAL' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'PROC' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'MAIN' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'CALL' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'UNCALL' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'FROM' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'LOOP' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'UNTIL' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'DO' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'IF' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'THEN' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'ELSE' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'FI' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'LPAR' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'RPAR' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'LBRACKET' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'RBRACKET' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'COMMA' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'OR' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'AND' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'PLUS' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'MINUS' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'TIMES' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'DIVIDE' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'MOD' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'LESS' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'GREATER' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'EQUAL' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'NOT' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'LEQ' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'GEQ' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'NOTEQ' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'PLUSEQUAL' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'MINUSEQUAL' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'POWEREQUAL' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'SWITCH' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'TYPEINT' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'INT' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'ID' (noprec):   reduce stmt --> 'UNCALL' proc
    action 'error' (noprec):   reduce stmt --> 'UNCALL' proc
    action '#' (noprec):   reduce stmt --> 'UNCALL' proc
    action '$$' (noprec):   reduce stmt --> 'UNCALL' proc

  immediate action:   reduce stmt --> 'UNCALL' proc
 gotos:

state 47:
  items:
    stmt -> 'IF' . exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    stmt -> 'IF' . exp 'THEN' stmt 'FI' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 48

state 48:
  items:
    stmt -> 'IF' exp . 'THEN' stmt 'ELSE' stmt 'FI' exp
    stmt -> 'IF' exp . 'THEN' stmt 'FI' exp
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   shift 49
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (noprec):   error
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 49:
  items:
    stmt -> 'IF' exp 'THEN' . stmt 'ELSE' stmt 'FI' exp
    stmt -> 'IF' exp 'THEN' . stmt 'FI' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 50
    goto exp: 71

state 50:
  items:
    stmt -> 'IF' exp 'THEN' stmt . 'ELSE' stmt 'FI' exp
    stmt -> 'IF' exp 'THEN' stmt . 'FI' exp
    stmt -> stmt . stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   shift 51
    action 'FI' (noprec):   shift 55
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 82
    goto exp: 71

state 51:
  items:
    stmt -> 'IF' exp 'THEN' stmt 'ELSE' . stmt 'FI' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 52
    goto exp: 71

state 52:
  items:
    stmt -> 'IF' exp 'THEN' stmt 'ELSE' stmt . 'FI' exp
    stmt -> stmt . stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   shift 53
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 82
    goto exp: 71

state 53:
  items:
    stmt -> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 54

state 54:
  items:
    stmt -> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp . 
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'LOCAL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'DELOCAL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'PROC' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'MAIN' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'CALL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'UNCALL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'FROM' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'LOOP' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'UNTIL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'DO' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'IF' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'THEN' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'ELSE' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'FI' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'LPAR' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'RPAR' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'LBRACKET' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'RBRACKET' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'COMMA' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'MINUSEQUAL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'POWEREQUAL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'SWITCH' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'TYPEINT' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'INT' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'ID' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action 'error' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action '#' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp
    action '$$' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'ELSE' stmt 'FI' exp

  immediate action: <none>
 gotos:

state 55:
  items:
    stmt -> 'IF' exp 'THEN' stmt 'FI' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 56

state 56:
  items:
    stmt -> 'IF' exp 'THEN' stmt 'FI' exp . 
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'LOCAL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'DELOCAL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'PROC' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'MAIN' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'CALL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'UNCALL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'FROM' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'LOOP' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'UNTIL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'DO' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'IF' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'THEN' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'ELSE' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'FI' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'LPAR' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'RPAR' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'LBRACKET' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'RBRACKET' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'COMMA' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'MINUSEQUAL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'POWEREQUAL' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'SWITCH' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'TYPEINT' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'INT' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'ID' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action 'error' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action '#' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp
    action '$$' (noprec):   reduce stmt --> 'IF' exp 'THEN' stmt 'FI' exp

  immediate action: <none>
 gotos:

state 57:
  items:
    stmt -> 'FROM' . exp 'DO' stmt 'UNTIL' exp
    stmt -> 'FROM' . exp 'LOOP' stmt 'UNTIL' exp
    stmt -> 'FROM' . exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 58

state 58:
  items:
    stmt -> 'FROM' exp . 'DO' stmt 'UNTIL' exp
    stmt -> 'FROM' exp . 'LOOP' stmt 'UNTIL' exp
    stmt -> 'FROM' exp . 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   shift 63
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   shift 59
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (noprec):   error
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 59:
  items:
    stmt -> 'FROM' exp 'DO' . stmt 'UNTIL' exp
    stmt -> 'FROM' exp 'DO' . stmt 'LOOP' stmt 'UNTIL' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 60
    goto exp: 71

state 60:
  items:
    stmt -> 'FROM' exp 'DO' stmt . 'UNTIL' exp
    stmt -> 'FROM' exp 'DO' stmt . 'LOOP' stmt 'UNTIL' exp
    stmt -> stmt . stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   shift 67
    action 'UNTIL' (noprec):   shift 61
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 82
    goto exp: 71

state 61:
  items:
    stmt -> 'FROM' exp 'DO' stmt 'UNTIL' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 62

state 62:
  items:
    stmt -> 'FROM' exp 'DO' stmt 'UNTIL' exp . 
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'LOCAL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'DELOCAL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'PROC' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'MAIN' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'CALL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'UNCALL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'FROM' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'LOOP' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'UNTIL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'DO' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'IF' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'THEN' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'ELSE' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'FI' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'LPAR' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'RPAR' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'LBRACKET' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'RBRACKET' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'COMMA' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'MINUSEQUAL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'POWEREQUAL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'SWITCH' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'TYPEINT' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'INT' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'ID' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action 'error' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action '#' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp
    action '$$' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'UNTIL' exp

  immediate action: <none>
 gotos:

state 63:
  items:
    stmt -> 'FROM' exp 'LOOP' . stmt 'UNTIL' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 64
    goto exp: 71

state 64:
  items:
    stmt -> 'FROM' exp 'LOOP' stmt . 'UNTIL' exp
    stmt -> stmt . stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   shift 65
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 82
    goto exp: 71

state 65:
  items:
    stmt -> 'FROM' exp 'LOOP' stmt 'UNTIL' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 66

state 66:
  items:
    stmt -> 'FROM' exp 'LOOP' stmt 'UNTIL' exp . 
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'LOCAL' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'DELOCAL' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'PROC' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'MAIN' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'CALL' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'UNCALL' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'FROM' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'LOOP' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'UNTIL' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'DO' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'IF' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'THEN' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'ELSE' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'FI' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'LPAR' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'RPAR' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'LBRACKET' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'RBRACKET' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'COMMA' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'MINUSEQUAL' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'POWEREQUAL' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'SWITCH' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'TYPEINT' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'INT' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'ID' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action 'error' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action '#' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp
    action '$$' (noprec):   reduce stmt --> 'FROM' exp 'LOOP' stmt 'UNTIL' exp

  immediate action: <none>
 gotos:

state 67:
  items:
    stmt -> 'FROM' exp 'DO' stmt 'LOOP' . stmt 'UNTIL' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 68
    goto exp: 71

state 68:
  items:
    stmt -> 'FROM' exp 'DO' stmt 'LOOP' stmt . 'UNTIL' exp
    stmt -> stmt . stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   shift 69
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 82
    goto exp: 71

state 69:
  items:
    stmt -> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 70

state 70:
  items:
    stmt -> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp . 
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'LOCAL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'DELOCAL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'PROC' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'MAIN' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'CALL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'UNCALL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'FROM' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'LOOP' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'UNTIL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'DO' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'IF' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'THEN' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'ELSE' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'FI' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'LPAR' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'RPAR' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'LBRACKET' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'RBRACKET' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'COMMA' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'MINUSEQUAL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'POWEREQUAL' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'SWITCH' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'TYPEINT' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'INT' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'ID' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action 'error' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action '#' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp
    action '$$' (noprec):   reduce stmt --> 'FROM' exp 'DO' stmt 'LOOP' stmt 'UNTIL' exp

  immediate action: <none>
 gotos:

state 71:
  items:
    stmt -> exp . opr
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (noprec):   error
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (explicit right 9994):   shift 5
    action 'MINUSEQUAL' (explicit right 9994):   shift 7
    action 'POWEREQUAL' (explicit right 9994):   shift 9
    action 'SWITCH' (noprec):   shift 11
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto opr: 72

state 72:
  items:
    stmt -> exp opr . 

  actions:
    action 'EOF' (noprec):   reduce stmt --> exp opr
    action 'LOCAL' (noprec):   reduce stmt --> exp opr
    action 'DELOCAL' (noprec):   reduce stmt --> exp opr
    action 'PROC' (noprec):   reduce stmt --> exp opr
    action 'MAIN' (noprec):   reduce stmt --> exp opr
    action 'CALL' (noprec):   reduce stmt --> exp opr
    action 'UNCALL' (noprec):   reduce stmt --> exp opr
    action 'FROM' (noprec):   reduce stmt --> exp opr
    action 'LOOP' (noprec):   reduce stmt --> exp opr
    action 'UNTIL' (noprec):   reduce stmt --> exp opr
    action 'DO' (noprec):   reduce stmt --> exp opr
    action 'IF' (noprec):   reduce stmt --> exp opr
    action 'THEN' (noprec):   reduce stmt --> exp opr
    action 'ELSE' (noprec):   reduce stmt --> exp opr
    action 'FI' (noprec):   reduce stmt --> exp opr
    action 'LPAR' (noprec):   reduce stmt --> exp opr
    action 'RPAR' (noprec):   reduce stmt --> exp opr
    action 'LBRACKET' (noprec):   reduce stmt --> exp opr
    action 'RBRACKET' (noprec):   reduce stmt --> exp opr
    action 'COMMA' (noprec):   reduce stmt --> exp opr
    action 'OR' (noprec):   reduce stmt --> exp opr
    action 'AND' (noprec):   reduce stmt --> exp opr
    action 'PLUS' (noprec):   reduce stmt --> exp opr
    action 'MINUS' (noprec):   reduce stmt --> exp opr
    action 'TIMES' (noprec):   reduce stmt --> exp opr
    action 'DIVIDE' (noprec):   reduce stmt --> exp opr
    action 'MOD' (noprec):   reduce stmt --> exp opr
    action 'LESS' (noprec):   reduce stmt --> exp opr
    action 'GREATER' (noprec):   reduce stmt --> exp opr
    action 'EQUAL' (noprec):   reduce stmt --> exp opr
    action 'NOT' (noprec):   reduce stmt --> exp opr
    action 'LEQ' (noprec):   reduce stmt --> exp opr
    action 'GEQ' (noprec):   reduce stmt --> exp opr
    action 'NOTEQ' (noprec):   reduce stmt --> exp opr
    action 'PLUSEQUAL' (noprec):   reduce stmt --> exp opr
    action 'MINUSEQUAL' (noprec):   reduce stmt --> exp opr
    action 'POWEREQUAL' (noprec):   reduce stmt --> exp opr
    action 'SWITCH' (noprec):   reduce stmt --> exp opr
    action 'TYPEINT' (noprec):   reduce stmt --> exp opr
    action 'INT' (noprec):   reduce stmt --> exp opr
    action 'ID' (noprec):   reduce stmt --> exp opr
    action 'error' (noprec):   reduce stmt --> exp opr
    action '#' (noprec):   reduce stmt --> exp opr
    action '$$' (noprec):   reduce stmt --> exp opr

  immediate action:   reduce stmt --> exp opr
 gotos:

state 73:
  items:
    stmt -> 'LOCAL' . defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   shift 13
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto type: 29
    goto defvar: 74

state 74:
  items:
    stmt -> 'LOCAL' defvar . 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (explicit left 9997):   shift 75
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 75:
  items:
    stmt -> 'LOCAL' defvar 'EQUAL' . exp stmt 'DELOCAL' defvar 'EQUAL' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 76

state 76:
  items:
    stmt -> 'LOCAL' defvar 'EQUAL' exp . stmt 'DELOCAL' defvar 'EQUAL' exp
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 77
    goto exp: 71

state 77:
  items:
    stmt -> 'LOCAL' defvar 'EQUAL' exp stmt . 'DELOCAL' defvar 'EQUAL' exp
    stmt -> stmt . stmt

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   shift 78
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto stmt: 82
    goto exp: 71

state 78:
  items:
    stmt -> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' . defvar 'EQUAL' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   shift 13
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto type: 29
    goto defvar: 79

state 79:
  items:
    stmt -> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar . 'EQUAL' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (explicit left 9997):   shift 80
    action 'NOT' (noprec):   error
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 80:
  items:
    stmt -> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 81

state 81:
  items:
    stmt -> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp . 
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'LOCAL' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'DELOCAL' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'PROC' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'MAIN' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'CALL' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'UNCALL' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'FROM' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'LOOP' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'UNTIL' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'DO' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'IF' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'THEN' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'ELSE' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'FI' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'LPAR' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'RPAR' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'LBRACKET' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'RBRACKET' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'COMMA' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'MINUSEQUAL' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'POWEREQUAL' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'SWITCH' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'TYPEINT' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'INT' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'ID' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action 'error' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action '#' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp
    action '$$' (explicit left 9997):   reduce stmt --> 'LOCAL' defvar 'EQUAL' exp stmt 'DELOCAL' defvar 'EQUAL' exp

  immediate action: <none>
 gotos:

state 82:
  items:
    stmt -> stmt . stmt
    stmt -> stmt stmt . 

  actions:
    action 'EOF' (noprec):   reduce stmt --> stmt stmt
    action 'LOCAL' (noprec):   shift 73
    action 'DELOCAL' (noprec):   reduce stmt --> stmt stmt
    action 'PROC' (noprec):   reduce stmt --> stmt stmt
    action 'MAIN' (noprec):   reduce stmt --> stmt stmt
    action 'CALL' (noprec):   shift 43
    action 'UNCALL' (noprec):   shift 45
    action 'FROM' (noprec):   shift 57
    action 'LOOP' (noprec):   reduce stmt --> stmt stmt
    action 'UNTIL' (noprec):   reduce stmt --> stmt stmt
    action 'DO' (noprec):   reduce stmt --> stmt stmt
    action 'IF' (noprec):   shift 47
    action 'THEN' (noprec):   reduce stmt --> stmt stmt
    action 'ELSE' (noprec):   reduce stmt --> stmt stmt
    action 'FI' (noprec):   reduce stmt --> stmt stmt
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   reduce stmt --> stmt stmt
    action 'LBRACKET' (noprec):   reduce stmt --> stmt stmt
    action 'RBRACKET' (noprec):   reduce stmt --> stmt stmt
    action 'COMMA' (noprec):   reduce stmt --> stmt stmt
    action 'OR' (noprec):   reduce stmt --> stmt stmt
    action 'AND' (noprec):   reduce stmt --> stmt stmt
    action 'PLUS' (noprec):   reduce stmt --> stmt stmt
    action 'MINUS' (noprec):   reduce stmt --> stmt stmt
    action 'TIMES' (noprec):   reduce stmt --> stmt stmt
    action 'DIVIDE' (noprec):   reduce stmt --> stmt stmt
    action 'MOD' (noprec):   reduce stmt --> stmt stmt
    action 'LESS' (noprec):   reduce stmt --> stmt stmt
    action 'GREATER' (noprec):   reduce stmt --> stmt stmt
    action 'EQUAL' (noprec):   reduce stmt --> stmt stmt
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   reduce stmt --> stmt stmt
    action 'GEQ' (noprec):   reduce stmt --> stmt stmt
    action 'NOTEQ' (noprec):   reduce stmt --> stmt stmt
    action 'PLUSEQUAL' (noprec):   reduce stmt --> stmt stmt
    action 'MINUSEQUAL' (noprec):   reduce stmt --> stmt stmt
    action 'POWEREQUAL' (noprec):   reduce stmt --> stmt stmt
    action 'SWITCH' (noprec):   reduce stmt --> stmt stmt
    action 'TYPEINT' (noprec):   reduce stmt --> stmt stmt
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   reduce stmt --> stmt stmt
    action '#' (noprec):   reduce stmt --> stmt stmt
    action '$$' (noprec):   reduce stmt --> stmt stmt

  immediate action: <none>
 gotos:
    goto stmt: 82
    goto exp: 71

state 83:
  items:
    exp -> 'INT' . 

  actions:
    action 'EOF' (noprec):   reduce exp --> 'INT'
    action 'LOCAL' (noprec):   reduce exp --> 'INT'
    action 'DELOCAL' (noprec):   reduce exp --> 'INT'
    action 'PROC' (noprec):   reduce exp --> 'INT'
    action 'MAIN' (noprec):   reduce exp --> 'INT'
    action 'CALL' (noprec):   reduce exp --> 'INT'
    action 'UNCALL' (noprec):   reduce exp --> 'INT'
    action 'FROM' (noprec):   reduce exp --> 'INT'
    action 'LOOP' (noprec):   reduce exp --> 'INT'
    action 'UNTIL' (noprec):   reduce exp --> 'INT'
    action 'DO' (noprec):   reduce exp --> 'INT'
    action 'IF' (noprec):   reduce exp --> 'INT'
    action 'THEN' (noprec):   reduce exp --> 'INT'
    action 'ELSE' (noprec):   reduce exp --> 'INT'
    action 'FI' (noprec):   reduce exp --> 'INT'
    action 'LPAR' (noprec):   reduce exp --> 'INT'
    action 'RPAR' (noprec):   reduce exp --> 'INT'
    action 'LBRACKET' (noprec):   reduce exp --> 'INT'
    action 'RBRACKET' (noprec):   reduce exp --> 'INT'
    action 'COMMA' (noprec):   reduce exp --> 'INT'
    action 'OR' (noprec):   reduce exp --> 'INT'
    action 'AND' (noprec):   reduce exp --> 'INT'
    action 'PLUS' (noprec):   reduce exp --> 'INT'
    action 'MINUS' (noprec):   reduce exp --> 'INT'
    action 'TIMES' (noprec):   reduce exp --> 'INT'
    action 'DIVIDE' (noprec):   reduce exp --> 'INT'
    action 'MOD' (noprec):   reduce exp --> 'INT'
    action 'LESS' (noprec):   reduce exp --> 'INT'
    action 'GREATER' (noprec):   reduce exp --> 'INT'
    action 'EQUAL' (noprec):   reduce exp --> 'INT'
    action 'NOT' (noprec):   reduce exp --> 'INT'
    action 'LEQ' (noprec):   reduce exp --> 'INT'
    action 'GEQ' (noprec):   reduce exp --> 'INT'
    action 'NOTEQ' (noprec):   reduce exp --> 'INT'
    action 'PLUSEQUAL' (noprec):   reduce exp --> 'INT'
    action 'MINUSEQUAL' (noprec):   reduce exp --> 'INT'
    action 'POWEREQUAL' (noprec):   reduce exp --> 'INT'
    action 'SWITCH' (noprec):   reduce exp --> 'INT'
    action 'TYPEINT' (noprec):   reduce exp --> 'INT'
    action 'INT' (noprec):   reduce exp --> 'INT'
    action 'ID' (noprec):   reduce exp --> 'INT'
    action 'error' (noprec):   reduce exp --> 'INT'
    action '#' (noprec):   reduce exp --> 'INT'
    action '$$' (noprec):   reduce exp --> 'INT'

  immediate action:   reduce exp --> 'INT'
 gotos:

state 84:
  items:
    exp -> 'ID' . 
    exp -> 'ID' . 'LBRACKET' exp 'RBRACKET'

  actions:
    action 'EOF' (noprec):   reduce exp --> 'ID'
    action 'LOCAL' (noprec):   reduce exp --> 'ID'
    action 'DELOCAL' (noprec):   reduce exp --> 'ID'
    action 'PROC' (noprec):   reduce exp --> 'ID'
    action 'MAIN' (noprec):   reduce exp --> 'ID'
    action 'CALL' (noprec):   reduce exp --> 'ID'
    action 'UNCALL' (noprec):   reduce exp --> 'ID'
    action 'FROM' (noprec):   reduce exp --> 'ID'
    action 'LOOP' (noprec):   reduce exp --> 'ID'
    action 'UNTIL' (noprec):   reduce exp --> 'ID'
    action 'DO' (noprec):   reduce exp --> 'ID'
    action 'IF' (noprec):   reduce exp --> 'ID'
    action 'THEN' (noprec):   reduce exp --> 'ID'
    action 'ELSE' (noprec):   reduce exp --> 'ID'
    action 'FI' (noprec):   reduce exp --> 'ID'
    action 'LPAR' (noprec):   reduce exp --> 'ID'
    action 'RPAR' (noprec):   reduce exp --> 'ID'
    action 'LBRACKET' (noprec):   shift 85
    action 'RBRACKET' (noprec):   reduce exp --> 'ID'
    action 'COMMA' (noprec):   reduce exp --> 'ID'
    action 'OR' (noprec):   reduce exp --> 'ID'
    action 'AND' (noprec):   reduce exp --> 'ID'
    action 'PLUS' (noprec):   reduce exp --> 'ID'
    action 'MINUS' (noprec):   reduce exp --> 'ID'
    action 'TIMES' (noprec):   reduce exp --> 'ID'
    action 'DIVIDE' (noprec):   reduce exp --> 'ID'
    action 'MOD' (noprec):   reduce exp --> 'ID'
    action 'LESS' (noprec):   reduce exp --> 'ID'
    action 'GREATER' (noprec):   reduce exp --> 'ID'
    action 'EQUAL' (noprec):   reduce exp --> 'ID'
    action 'NOT' (noprec):   reduce exp --> 'ID'
    action 'LEQ' (noprec):   reduce exp --> 'ID'
    action 'GEQ' (noprec):   reduce exp --> 'ID'
    action 'NOTEQ' (noprec):   reduce exp --> 'ID'
    action 'PLUSEQUAL' (noprec):   reduce exp --> 'ID'
    action 'MINUSEQUAL' (noprec):   reduce exp --> 'ID'
    action 'POWEREQUAL' (noprec):   reduce exp --> 'ID'
    action 'SWITCH' (noprec):   reduce exp --> 'ID'
    action 'TYPEINT' (noprec):   reduce exp --> 'ID'
    action 'INT' (noprec):   reduce exp --> 'ID'
    action 'ID' (noprec):   reduce exp --> 'ID'
    action 'error' (noprec):   reduce exp --> 'ID'
    action '#' (noprec):   reduce exp --> 'ID'
    action '$$' (noprec):   reduce exp --> 'ID'

  immediate action: <none>
 gotos:

state 85:
  items:
    exp -> 'ID' 'LBRACKET' . exp 'RBRACKET'

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 86

state 86:
  items:
    exp -> 'ID' 'LBRACKET' exp . 'RBRACKET'
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   shift 87
    action 'COMMA' (noprec):   error
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (noprec):   error
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 87:
  items:
    exp -> 'ID' 'LBRACKET' exp 'RBRACKET' . 

  actions:
    action 'EOF' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'LOCAL' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'DELOCAL' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'PROC' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'MAIN' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'CALL' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'UNCALL' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'FROM' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'LOOP' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'UNTIL' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'DO' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'IF' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'THEN' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'ELSE' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'FI' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'LPAR' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'RPAR' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'LBRACKET' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'RBRACKET' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'COMMA' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'OR' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'AND' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'PLUS' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'MINUS' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'TIMES' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'DIVIDE' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'MOD' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'LESS' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'GREATER' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'EQUAL' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'NOT' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'LEQ' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'GEQ' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'NOTEQ' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'PLUSEQUAL' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'MINUSEQUAL' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'POWEREQUAL' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'SWITCH' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'TYPEINT' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'INT' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'ID' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action 'error' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action '#' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
    action '$$' (noprec):   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'

  immediate action:   reduce exp --> 'ID' 'LBRACKET' exp 'RBRACKET'
 gotos:

state 88:
  items:
    exp -> 'NOT' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 89

state 89:
  items:
    exp -> 'NOT' exp . 
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'LOCAL' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'DELOCAL' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'PROC' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'MAIN' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'CALL' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'UNCALL' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'FROM' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'LOOP' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'UNTIL' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'DO' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'IF' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'THEN' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'ELSE' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'FI' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'LPAR' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'RPAR' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'LBRACKET' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'RBRACKET' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'COMMA' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'OR' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'AND' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'PLUS' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'MINUS' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'TIMES' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'DIVIDE' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'MOD' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'LESS' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'GREATER' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'EQUAL' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'NOT' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'LEQ' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'GEQ' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'NOTEQ' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'PLUSEQUAL' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'MINUSEQUAL' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'POWEREQUAL' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'SWITCH' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'TYPEINT' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'INT' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'ID' (explicit right 10000):   reduce exp --> 'NOT' exp
    action 'error' (explicit right 10000):   reduce exp --> 'NOT' exp
    action '#' (explicit right 10000):   reduce exp --> 'NOT' exp
    action '$$' (explicit right 10000):   reduce exp --> 'NOT' exp

  immediate action: <none>
 gotos:

state 90:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp 'NOTEQ' exp . 
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'LOCAL' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'DELOCAL' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'PROC' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'MAIN' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'CALL' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'UNCALL' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'FROM' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'LOOP' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'UNTIL' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'DO' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'IF' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'THEN' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'ELSE' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'FI' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'LPAR' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'RPAR' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'LBRACKET' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'RBRACKET' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'COMMA' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'OR' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'AND' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'GREATER' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'EQUAL' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'NOT' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'LEQ' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'GEQ' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'NOTEQ' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'PLUSEQUAL' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'MINUSEQUAL' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'POWEREQUAL' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'SWITCH' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'TYPEINT' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'INT' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'ID' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action 'error' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action '#' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp
    action '$$' (explicit left 9997):   reduce exp --> exp 'NOTEQ' exp

  immediate action: <none>
 gotos:

state 91:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp 'PLUS' exp . 
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'LOCAL' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'DELOCAL' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'PROC' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'MAIN' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'CALL' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'UNCALL' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'FROM' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'LOOP' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'UNTIL' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'DO' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'IF' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'THEN' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'ELSE' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'FI' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'LPAR' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'RPAR' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'LBRACKET' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'RBRACKET' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'COMMA' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'OR' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'AND' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'PLUS' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'MINUS' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'GREATER' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'EQUAL' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'NOT' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'LEQ' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'GEQ' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'NOTEQ' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'PLUSEQUAL' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'MINUSEQUAL' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'POWEREQUAL' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'SWITCH' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'TYPEINT' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'INT' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'ID' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action 'error' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action '#' (explicit left 9998):   reduce exp --> exp 'PLUS' exp
    action '$$' (explicit left 9998):   reduce exp --> exp 'PLUS' exp

  immediate action: <none>
 gotos:

state 92:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp 'MINUS' exp . 
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'LOCAL' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'DELOCAL' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'PROC' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'MAIN' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'CALL' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'UNCALL' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'FROM' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'LOOP' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'UNTIL' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'DO' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'IF' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'THEN' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'ELSE' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'FI' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'LPAR' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'RPAR' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'LBRACKET' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'RBRACKET' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'COMMA' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'OR' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'AND' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'PLUS' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'MINUS' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'GREATER' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'EQUAL' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'NOT' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'LEQ' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'GEQ' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'NOTEQ' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'PLUSEQUAL' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'MINUSEQUAL' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'POWEREQUAL' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'SWITCH' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'TYPEINT' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'INT' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'ID' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action 'error' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action '#' (explicit left 9998):   reduce exp --> exp 'MINUS' exp
    action '$$' (explicit left 9998):   reduce exp --> exp 'MINUS' exp

  immediate action: <none>
 gotos:

state 93:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp 'TIMES' exp . 
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'LOCAL' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'DELOCAL' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'PROC' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'MAIN' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'CALL' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'UNCALL' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'FROM' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'LOOP' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'UNTIL' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'DO' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'IF' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'THEN' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'ELSE' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'FI' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'LPAR' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'RPAR' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'LBRACKET' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'RBRACKET' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'COMMA' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'OR' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'AND' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'PLUS' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'MINUS' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'TIMES' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'DIVIDE' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'MOD' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'LESS' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'GREATER' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'EQUAL' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'NOT' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'LEQ' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'GEQ' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'NOTEQ' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'PLUSEQUAL' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'MINUSEQUAL' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'POWEREQUAL' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'SWITCH' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'TYPEINT' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'INT' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'ID' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action 'error' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action '#' (explicit left 9999):   reduce exp --> exp 'TIMES' exp
    action '$$' (explicit left 9999):   reduce exp --> exp 'TIMES' exp

  immediate action: <none>
 gotos:

state 94:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp 'DIVIDE' exp . 
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'LOCAL' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'DELOCAL' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'PROC' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'MAIN' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'CALL' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'UNCALL' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'FROM' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'LOOP' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'UNTIL' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'DO' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'IF' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'THEN' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'ELSE' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'FI' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'LPAR' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'RPAR' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'LBRACKET' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'RBRACKET' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'COMMA' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'OR' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'AND' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'PLUS' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'MINUS' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'TIMES' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'DIVIDE' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'MOD' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'LESS' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'GREATER' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'EQUAL' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'NOT' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'LEQ' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'GEQ' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'NOTEQ' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'PLUSEQUAL' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'MINUSEQUAL' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'POWEREQUAL' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'SWITCH' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'TYPEINT' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'INT' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'ID' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action 'error' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action '#' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp
    action '$$' (explicit left 9999):   reduce exp --> exp 'DIVIDE' exp

  immediate action: <none>
 gotos:

state 95:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp 'MOD' exp . 
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'LOCAL' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'DELOCAL' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'PROC' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'MAIN' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'CALL' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'UNCALL' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'FROM' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'LOOP' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'UNTIL' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'DO' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'IF' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'THEN' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'ELSE' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'FI' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'LPAR' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'RPAR' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'LBRACKET' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'RBRACKET' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'COMMA' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'OR' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'AND' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'PLUS' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'MINUS' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'TIMES' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'DIVIDE' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'MOD' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'LESS' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'GREATER' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'EQUAL' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'NOT' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'LEQ' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'GEQ' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'NOTEQ' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'PLUSEQUAL' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'MINUSEQUAL' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'POWEREQUAL' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'SWITCH' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'TYPEINT' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'INT' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'ID' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action 'error' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action '#' (explicit left 9999):   reduce exp --> exp 'MOD' exp
    action '$$' (explicit left 9999):   reduce exp --> exp 'MOD' exp

  immediate action: <none>
 gotos:

state 96:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp 'LEQ' exp . 
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'LOCAL' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'DELOCAL' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'PROC' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'MAIN' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'CALL' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'UNCALL' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'FROM' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'LOOP' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'UNTIL' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'DO' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'IF' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'THEN' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'ELSE' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'FI' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'LPAR' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'RPAR' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'LBRACKET' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'RBRACKET' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'COMMA' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'OR' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'AND' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'GREATER' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'EQUAL' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'NOT' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'LEQ' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'GEQ' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'NOTEQ' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'PLUSEQUAL' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'MINUSEQUAL' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'POWEREQUAL' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'SWITCH' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'TYPEINT' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'INT' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'ID' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action 'error' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action '#' (explicit left 9997):   reduce exp --> exp 'LEQ' exp
    action '$$' (explicit left 9997):   reduce exp --> exp 'LEQ' exp

  immediate action: <none>
 gotos:

state 97:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp 'GEQ' exp . 
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'LOCAL' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'DELOCAL' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'PROC' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'MAIN' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'CALL' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'UNCALL' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'FROM' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'LOOP' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'UNTIL' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'DO' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'IF' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'THEN' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'ELSE' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'FI' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'LPAR' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'RPAR' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'LBRACKET' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'RBRACKET' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'COMMA' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'OR' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'AND' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'GREATER' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'EQUAL' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'NOT' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'LEQ' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'GEQ' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'NOTEQ' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'PLUSEQUAL' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'MINUSEQUAL' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'POWEREQUAL' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'SWITCH' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'TYPEINT' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'INT' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'ID' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action 'error' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action '#' (explicit left 9997):   reduce exp --> exp 'GEQ' exp
    action '$$' (explicit left 9997):   reduce exp --> exp 'GEQ' exp

  immediate action: <none>
 gotos:

state 98:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp 'EQUAL' exp . 
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'LOCAL' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'DELOCAL' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'PROC' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'MAIN' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'CALL' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'UNCALL' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'FROM' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'LOOP' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'UNTIL' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'DO' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'IF' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'THEN' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'ELSE' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'FI' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'LPAR' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'RPAR' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'LBRACKET' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'RBRACKET' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'COMMA' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'OR' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'AND' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'GREATER' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'EQUAL' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'NOT' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'LEQ' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'GEQ' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'NOTEQ' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'PLUSEQUAL' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'MINUSEQUAL' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'POWEREQUAL' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'SWITCH' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'TYPEINT' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'INT' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'ID' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action 'error' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action '#' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp
    action '$$' (explicit left 9997):   reduce exp --> exp 'EQUAL' exp

  immediate action: <none>
 gotos:

state 99:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp 'LESS' exp . 
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'LOCAL' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'DELOCAL' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'PROC' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'MAIN' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'CALL' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'UNCALL' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'FROM' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'LOOP' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'UNTIL' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'DO' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'IF' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'THEN' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'ELSE' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'FI' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'LPAR' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'RPAR' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'LBRACKET' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'RBRACKET' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'COMMA' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'OR' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'AND' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'GREATER' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'EQUAL' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'NOT' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'LEQ' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'GEQ' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'NOTEQ' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'PLUSEQUAL' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'MINUSEQUAL' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'POWEREQUAL' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'SWITCH' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'TYPEINT' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'INT' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'ID' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action 'error' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action '#' (explicit left 9997):   reduce exp --> exp 'LESS' exp
    action '$$' (explicit left 9997):   reduce exp --> exp 'LESS' exp

  immediate action: <none>
 gotos:

state 100:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp 'GREATER' exp . 
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'LOCAL' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'DELOCAL' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'PROC' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'MAIN' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'CALL' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'UNCALL' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'FROM' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'LOOP' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'UNTIL' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'DO' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'IF' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'THEN' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'ELSE' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'FI' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'LPAR' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'RPAR' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'LBRACKET' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'RBRACKET' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'COMMA' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'OR' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'AND' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'GREATER' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'EQUAL' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'NOT' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'LEQ' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'GEQ' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'NOTEQ' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'PLUSEQUAL' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'MINUSEQUAL' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'POWEREQUAL' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'SWITCH' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'TYPEINT' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'INT' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'ID' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action 'error' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action '#' (explicit left 9997):   reduce exp --> exp 'GREATER' exp
    action '$$' (explicit left 9997):   reduce exp --> exp 'GREATER' exp

  immediate action: <none>
 gotos:

state 101:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp 'AND' exp . 
    exp -> exp . 'OR' exp

  actions:
    action 'EOF' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'LOCAL' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'DELOCAL' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'PROC' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'MAIN' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'CALL' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'UNCALL' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'FROM' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'LOOP' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'UNTIL' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'DO' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'IF' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'THEN' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'ELSE' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'FI' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'LPAR' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'RPAR' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'LBRACKET' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'RBRACKET' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'COMMA' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'OR' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'AND' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'MINUSEQUAL' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'POWEREQUAL' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'SWITCH' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'TYPEINT' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'INT' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'ID' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action 'error' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action '#' (explicit left 9996):   reduce exp --> exp 'AND' exp
    action '$$' (explicit left 9996):   reduce exp --> exp 'AND' exp

  immediate action: <none>
 gotos:

state 102:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp
    exp -> exp 'OR' exp . 

  actions:
    action 'EOF' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'LOCAL' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'DELOCAL' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'PROC' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'MAIN' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'CALL' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'UNCALL' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'FROM' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'LOOP' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'UNTIL' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'DO' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'IF' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'THEN' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'ELSE' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'FI' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'LPAR' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'RPAR' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'LBRACKET' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'RBRACKET' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'COMMA' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'OR' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'MINUSEQUAL' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'POWEREQUAL' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'SWITCH' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'TYPEINT' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'INT' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'ID' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action 'error' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action '#' (explicit left 9995):   reduce exp --> exp 'OR' exp
    action '$$' (explicit left 9995):   reduce exp --> exp 'OR' exp

  immediate action: <none>
 gotos:

state 103:
  items:
    exp -> exp . 'NOTEQ' exp
    exp -> exp . 'PLUS' exp
    exp -> exp . 'MINUS' exp
    exp -> exp . 'TIMES' exp
    exp -> exp . 'DIVIDE' exp
    exp -> exp . 'MOD' exp
    exp -> exp . 'LEQ' exp
    exp -> exp . 'GEQ' exp
    exp -> exp . 'EQUAL' exp
    exp -> exp . 'LESS' exp
    exp -> exp . 'GREATER' exp
    exp -> exp . 'AND' exp
    exp -> exp . 'OR' exp
    exp -> 'LPAR' exp . 'RPAR'

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   shift 118
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (explicit left 9995):   shift 116
    action 'AND' (explicit left 9996):   shift 115
    action 'PLUS' (explicit left 9998):   shift 105
    action 'MINUS' (explicit left 9998):   shift 106
    action 'TIMES' (explicit left 9999):   shift 107
    action 'DIVIDE' (explicit left 9999):   shift 108
    action 'MOD' (explicit left 9999):   shift 109
    action 'LESS' (explicit left 9997):   shift 113
    action 'GREATER' (explicit left 9997):   shift 114
    action 'EQUAL' (explicit left 9997):   shift 112
    action 'NOT' (noprec):   error
    action 'LEQ' (explicit left 9997):   shift 110
    action 'GEQ' (explicit left 9997):   shift 111
    action 'NOTEQ' (explicit left 9997):   shift 104
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:

state 104:
  items:
    exp -> exp 'NOTEQ' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 90

state 105:
  items:
    exp -> exp 'PLUS' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 91

state 106:
  items:
    exp -> exp 'MINUS' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 92

state 107:
  items:
    exp -> exp 'TIMES' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 93

state 108:
  items:
    exp -> exp 'DIVIDE' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 94

state 109:
  items:
    exp -> exp 'MOD' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 95

state 110:
  items:
    exp -> exp 'LEQ' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 96

state 111:
  items:
    exp -> exp 'GEQ' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 97

state 112:
  items:
    exp -> exp 'EQUAL' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 98

state 113:
  items:
    exp -> exp 'LESS' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 99

state 114:
  items:
    exp -> exp 'GREATER' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 100

state 115:
  items:
    exp -> exp 'AND' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 101

state 116:
  items:
    exp -> exp 'OR' . exp

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 102

state 117:
  items:
    exp -> 'LPAR' . exp 'RPAR'

  actions:
    action 'EOF' (noprec):   error
    action 'LOCAL' (noprec):   error
    action 'DELOCAL' (noprec):   error
    action 'PROC' (noprec):   error
    action 'MAIN' (noprec):   error
    action 'CALL' (noprec):   error
    action 'UNCALL' (noprec):   error
    action 'FROM' (noprec):   error
    action 'LOOP' (noprec):   error
    action 'UNTIL' (noprec):   error
    action 'DO' (noprec):   error
    action 'IF' (noprec):   error
    action 'THEN' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'FI' (noprec):   error
    action 'LPAR' (noprec):   shift 117
    action 'RPAR' (noprec):   error
    action 'LBRACKET' (noprec):   error
    action 'RBRACKET' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'OR' (noprec):   error
    action 'AND' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'TIMES' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'MOD' (noprec):   error
    action 'LESS' (noprec):   error
    action 'GREATER' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NOT' (explicit right 10000):   shift 88
    action 'LEQ' (noprec):   error
    action 'GEQ' (noprec):   error
    action 'NOTEQ' (noprec):   error
    action 'PLUSEQUAL' (noprec):   error
    action 'MINUSEQUAL' (noprec):   error
    action 'POWEREQUAL' (noprec):   error
    action 'SWITCH' (noprec):   error
    action 'TYPEINT' (noprec):   error
    action 'INT' (noprec):   shift 83
    action 'ID' (noprec):   shift 84
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error

  immediate action: <none>
 gotos:
    goto exp: 103

state 118:
  items:
    exp -> 'LPAR' exp 'RPAR' . 

  actions:
    action 'EOF' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'LOCAL' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'DELOCAL' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'PROC' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'MAIN' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'CALL' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'UNCALL' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'FROM' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'LOOP' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'UNTIL' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'DO' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'IF' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'THEN' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'ELSE' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'FI' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'LPAR' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'RPAR' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'LBRACKET' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'RBRACKET' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'COMMA' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'OR' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'AND' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'PLUS' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'MINUS' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'TIMES' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'DIVIDE' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'MOD' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'LESS' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'GREATER' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'EQUAL' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'NOT' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'LEQ' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'GEQ' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'NOTEQ' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'PLUSEQUAL' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'MINUSEQUAL' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'POWEREQUAL' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'SWITCH' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'TYPEINT' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'INT' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'ID' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action 'error' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action '#' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'
    action '$$' (noprec):   reduce exp --> 'LPAR' exp 'RPAR'

  immediate action:   reduce exp --> 'LPAR' exp 'RPAR'
 gotos:


startStates = 0
------------------------
