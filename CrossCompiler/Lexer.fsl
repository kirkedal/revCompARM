{
module Lexer

open System
open Microsoft.FSharp.Text.Lexing
open System.Text

exception LexicalError of string

let LexerError Lexbuf s =
    raise (LexicalError (s))

let keywords (s) =
     match s with
       | "int"          -> Parser.TYPEINT
       | "if"           -> Parser.IF
       | "then"         -> Parser.THEN
       | "else"         -> Parser.ELSE
       | "fi"           -> Parser.FI
       | "call"         -> Parser.CALL
       | "uncall"       -> Parser.UNCALL
       | "procedure"    -> Parser.PROC
       | "from"         -> Parser.FROM
       | "loop"         -> Parser.LOOP
       | "do"           -> Parser.DO
       | "until"        -> Parser.UNTIL
       | "iterate"      -> Parser.ITERATE
       | "to"           -> Parser.TO
       | "by"           -> Parser.BY
       | "end"          -> Parser.END
       | "local"        -> Parser.LOCAL
       | "delocal"      -> Parser.DELOCAL
       | _              -> Parser.ID (s)

let op (s) =
    match s with
      | "+"             -> Parser.PLUS
      | "-"             -> Parser.MINUS
      | "*"             -> Parser.TIMES
      | "/"             -> Parser.DIVIDE
      | "^"             -> Parser.XOR
      | "|"             -> Parser.BOR
      | "&"             -> Parser.BAND
      | "%"             -> Parser.MOD
      | "||"            -> Parser.OR
      | "&&"            -> Parser.AND
      | "!"             -> Parser.NOT
      | "<"             -> Parser.LESS
      | ">"             -> Parser.GREATER
      | "+="            -> Parser.PLUSEQUAL
      | "-="            -> Parser.MINUSEQUAL
      | "^="            -> Parser.POWEREQUAL
      | "<=>"           -> Parser.SWITCH
      | "="             -> Parser.EQUAL
      | "<="            -> Parser.LEQ
      | ">="            -> Parser.GEQ
      | "!="            -> Parser.NOTEQ

let mainDef (s) =
    match s with
      | "procedure main()"       -> Parser.MAIN

}

let whitespace    = [' ' '\t' '\r']
let newline       = ['\n' '\012']
let opReg         = ['+' '-' '*' '/' '%' '^' '|' '&' '<' '>' '=' '!']+
let idReg         = ['a'-'z' 'A'-'Z']['a'-'z' 'A'-'Z' '0'-'9' '_']*
let mainReg       = "procedure main()"
let num           = ['0'] | ['1'-'9']['0'-'9']*

rule tokenize = parse
  | whitespace      { tokenize lexbuf }
  | newline         { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
  | opReg           { op (Encoding.UTF8.GetString(lexbuf.Lexeme)) }
  | mainReg         { mainDef (Encoding.UTF8.GetString(lexbuf.Lexeme)) }
  | idReg           { keywords (Encoding.UTF8.GetString(lexbuf.Lexeme)) }
  | num             { Parser.INT( int64 (Encoding.UTF8.GetString(lexbuf.Lexeme))) }
  | '('             { Parser.LPAR }
  | ')'             { Parser.RPAR }
  | '['             { Parser.LBRACKET }
  | ']'             { Parser.RBRACKET }
  | ','             { Parser.COMMA }
  | eof             { Parser.EOF }
  | _               { LexerError lexbuf "illegal Symbol" }
