procedure crout(int LDU[][], int n)
  iterate int j = 0 to n-1
    iterate int i = j to n-1
      iterate int k = 0 to j-1
        if k = j
        then
          LDU[i][j] -= LDU[i][k]
        else
          LDU[i][j] -= LDU[i][k] * LDU[k][j]
        fi k = j
      end
    end

    iterate int i = j + 1 to n-1
      iterate int k = 0 to j-1
        if k = i
        then
          LDU[j][j] -= LDU[j][k]
        else
          LDU[j][i] -= LDU[j][k] * LDU[k][i]
        fi k = j
      end
      uncall mult(LDU[j][i], LDU[j][j])
    end
  end

procedure multLD(int A[][], int LDU[][], int n)
  iterate int i = 0 to n-1
    iterate int j = 0 to n-1
      call mult(A[j][i], LDU[i][i])
      iterate int k = i+1 to n-1
        A[j][i] += LDU[k][i] * A[j][k]
      end
    end
  end

procedure multU(int A[][], int LDU[][], int n)
  iterate int i = n-1 by -1 to 0
    iterate int j = 0 to n-1
      iterate int k = 0 to i-1
        A[j][i] += LDU[k][i] * A[j][k]
      end
    end
  end

procedure mult (int x, int y)
  local int t = x
    x += t * y - t
  delocal int t = x / y


procedure matrix_mult(int A[][], int B[][], int n)
  call crout(B, n)
  call multLD(A, B, n)
  call multU(A, B, n)
  uncall crout(B, n)


procedure main()
  int A[3][3]
  int B[3][3]
  int n
  n += 3

  A[0][0] ^= 3 A[1][0] ^= 1 A[2][0] ^= 4
  A[0][1] ^= 2 A[1][1] ^= 2 A[2][1] ^= 3
  A[0][2] ^= 4 A[1][2] ^= 1 A[2][2] ^= 1

  B[0][0] ^= 2 B[1][0] ^= 4 B[2][0] ^= 2
  B[0][1] ^= 4 B[1][1] ^= 1 B[2][1] ^= 3
  B[0][2] ^= 4 B[1][2] ^= 1 B[2][2] ^= 4

  uncall crout(B, n)
  iterate int i = 1 to 1
    call multLD(A, B, n)
    call multU(A, B, n)
  end
  call crout(B, n)
